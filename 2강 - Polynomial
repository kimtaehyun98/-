#include <iostream>
#include <string>
#pragma warning(disable:4996)
using namespace std;

float x = 0;
int stop = 0;
char check[100];

class Polyomial;
class Term {
private:
	float coef;//계수
	int exp;//차수,지수
public:
	Term() :coef(0), exp(0) {} //Term 생성자
	friend class Polynomial;
};

class Polynomial {
public:
	Polynomial() :capacity(1), terms(0), termArray(termArray = new Term[1]) {}  //Polynomial 생성자
	Polynomial Add(Polynomial poly);
	Polynomial smultPoly(float c, int e);
	void NewTerm(const float coeff, const int expp);
	float evalPoly(float f);
	void cout_over();
	friend ostream& operator<<(ostream&, Polynomial& poly);
	friend istream& operator>>(istream&, Polynomial& poly);
	//******  '+' 연산자 오버로딩 코드   **********
	Polynomial operator+(Polynomial& poly1) {
		return Add(poly1);
	}
	//******   '*' 연산자 오버로딩 코드   ***********
	Polynomial operator*(Polynomial& poly2) {
		Polynomial T;
		T = smultPoly(poly2.termArray[0].coef, poly2.termArray[0].exp);
		for (int i = 1; i < poly2.terms; i++) {
			T = T.Add(smultPoly(poly2.termArray[i].coef, poly2.termArray[i].exp));
		}
		return T;
	}
private:
	Term* termArray;   //0이 아닌 항의 배열
	int capacity;      //termArray의 크기
	int terms;         //0이 아닌 항의 수
};

//******* '>>' 연산자 오버로딩 코드   **********
istream& operator>>(istream& is, Polynomial& Poly) {
	string str;
	string tempp;
	int tempexp;
	float tempcoef;
	int k = 0;
	is >> str;
	if (str == ".") {
		exit(0);
	}
	int cnt = 0;
	for (int i = 0; str[i] != NULL; i++) {
		if (str[i] == '-' && k % 2 == 1) {
			stop = 1;
		}
		else if (48 <= str[i] && str[i] <= 57) {
			if (k % 2 == 0) {                              //계수 부분
				tempp = str[i];
				tempcoef = stof(tempp);
				k += 1;
			}
			else {                                         //지수부분
				check[cnt] = str[i];
				int newstop = 0;
				for (int s = 0; s < cnt; s++) {            //계수(차수)가 같은게 입력되었을 때 ex.(1,3)(2,3)(1,1)이 입력되었을때 예외처리
					if (check[s] == str[i]) {
						Polynomial AA;
						tempp = str[i];
						tempexp = stoi(tempp);
						AA.NewTerm(tempcoef, tempexp);
						Poly = Poly.Add(AA);
						k += 1;
						newstop = 1;
						break;
					}
				}
				cnt += 1;
				if (newstop == 1) continue;
				tempp = str[i];
				tempexp = stoi(tempp);
				Poly.NewTerm(tempcoef, tempexp);
				k += 1;
			}
		}
	}
	return is;
}

//**********  '<<'연산자 오버로딩을 위한 멤버함수 코드 *************
void Polynomial::cout_over() {
	//출력을 지수의 내림차순으로 하기 위한 선택정렬코드
	for (int i = 0; i < terms; i++) {
		int j = i;
		for (int k = i + 1; k < terms; k++) {
			if (termArray[k].exp > termArray[j].exp) {
				j = k;
			}
		}
		swap(termArray[i].exp, termArray[j].exp);
		swap(termArray[i].coef, termArray[j].coef);
	}
	for (int i = 0; i < terms; i++) {
		if (termArray[i].coef == 0) {
			continue;
		}
		else if (termArray[i].exp == 0) {
			cout << termArray[i].coef;
		}
		else if (termArray[i].exp == 1) {
			if (termArray[i].coef == 1) {
				cout << "x";
				if (i + 1 != terms) {
					cout << "+";
				}
			}
			else {
				cout << termArray[i].coef << "x";
				if (i + 1 != terms) {
					cout << "+";
				}
			}
		}
		else {
			if (termArray[i].coef == 1) {
				cout << "x^" << termArray[i].exp;
				if (i + 1 != terms) {
					cout << "+";
				}
			}
			else {
				cout << termArray[i].coef << "x^" << termArray[i].exp;
				if (i + 1 != terms) {
					cout << "+";
				}
			}
		}
	}
}
//******** cout << 연산자 오버로딩 코드 ***********
ostream& operator<<(ostream& os, Polynomial& PolyPoly) {
	PolyPoly.cout_over();
	return os;
}

Polynomial Polynomial::Add(Polynomial b) {
	Polynomial c;
	int apos = 0, bpos = 0;
	while ((apos < terms) && (bpos < b.terms)) {
		if ((termArray[apos].exp == b.termArray[bpos].exp)) {//차수가 같으면
			float t = termArray[apos].coef + b.termArray[bpos].coef;//계수끼리 더한다
			if (t)c.NewTerm(t, termArray[apos].exp);//계수의 합이 0이 아니라면 newTerm실행
			apos++; bpos++;
		}
		else if ((termArray[apos].exp < b.termArray[bpos].exp)) {//차수가 b의 차수가 더 크다면
			c.NewTerm(b.termArray[bpos].coef, b.termArray[bpos].exp);//newTerm에 
			bpos++;
		}
		else {
			c.NewTerm(termArray[apos].coef, termArray[apos].exp);
			apos++;
		}
	}
	//this의 나머지 항들 추가
	for (; apos < terms; apos++)
		c.NewTerm(termArray[apos].coef, termArray[apos].exp);
	for (; bpos < b.terms; bpos++)
		c.NewTerm(b.termArray[bpos].coef, b.termArray[bpos].exp);
	return c;
}

//***************  smultPoly함수  ***************
Polynomial Polynomial::smultPoly(float cc, int ee) {
	Polynomial d;
	int apos = 0;
	while (apos < terms) {
		int s = termArray[apos].exp + ee;//차수끼리는 더하고
		float t = termArray[apos].coef * cc;//계수끼리는 곱한다
		d.NewTerm(t, s);
		apos++;
	}
	return d;
}

void Polynomial::NewTerm(const float theCoeff, const int theExp) {
	//새로운 항을 Term Array끝에 첨가
	if (terms == capacity) {//Term Array의 공간이 꽉 찼을때
		capacity *= 2;
		Term* temp = new Term[capacity];
		copy(termArray, termArray + terms, temp);
		delete[]termArray;
		termArray = temp;
	}
	termArray[terms].coef = theCoeff;
	termArray[terms++].exp = theExp;
}

//***** evalPoly함수 **************
float Polynomial::evalPoly(float ff) {
	float ans = 0;
	float tempans = 1;
	for (int i = 0; i < terms; i++) {
		tempans = 1;
		for (int j = 0; j < termArray[i].exp; j++) {
			tempans = tempans * ff;//차수만큼 제곱하기
		}
		ans += termArray[i].coef * tempans;//계수에 곱하기
	}
	return ans;
}

int main(void) {
	while (1) {
		Polynomial a, b, c, d, t;
		cin >> a;
		cin >> b;
		cin >> c;
		//*********** 지수에 음수가 들어왔을 때의 예외처리 코드
		if (stop == 1) {
			stop = 0;
			cout << "지수에 음수를 입력했습니다. 프로그램의 처음으로 돌아갑니다." << '\n';
			cin.clear();
			cin.ignore(1000, '\n');
			continue;
		}
		cout << "A(x) = " << a << endl;
		cout << "B(x) = " << b << endl;
		cout << "C(x) = " << c << endl;
		t = a * b;
		d = t + c;
		cout << "T(x) = " << t << endl;
		cout << "D(x) = " << d << endl;
		cin >> x;
		cout << "x=" << x << "-->" << d.evalPoly(x) << endl;
		x = 0;
	}
}
