#include <iostream>
#include <algorithm>
using namespace std;

template <class T>
class stack {
public:
	stack(int stackCapacity = 10);
	bool empty();
	T& Top();
	void push(T& item);
	void pop();
private:
	T* stacks;
	int top;
	int capacity;
};

template <class T>
stack<T>::stack(int stackCapacity) :capacity(stackCapacity) {
	stacks = new T[capacity];
	top = -1;
}

template <class T>
inline bool stack<T>::empty() {
	return top == -1;
};

template <class T>
inline T& stack<T>::Top() {
	if (empty()) {
		cout << "비었습니다" << "\n";
	}
	return stacks[top];
}

template <class T>
void changesize(T*& a, int oldsize, int newsize) {
	if (newsize < 0) {
		cout << "새로운 배열의 크기는 0보다 크거나 같아야 합니다" << "\n";
		return;
	}
	T* temp = new T[newsize];
	int number = min(oldsize, newsize);
	copy(a, a + number, temp);
	delete[]a;
	a = temp;
}

template <class T>
void stack<T>::push(T& x) {
	if (top == capacity - 1) {
		changesize(stacks, capacity, 2 * capacity);
		capacity *= 2;
	}
	stacks[++top] = x;
}

template <class T>
void stack<T>::pop() {
	if (empty()) {
		cout << "스택이 비어있습니다." << "\n";
		return;
	}
	stacks[top--].~T();
}
