#include <iostream>
using namespace std;

template <class T>
class Queue {
public:
	Queue(int queueCapacity = 10);
	bool IsEmpty();
	T& Front();
	T& Rear();
	void Push(const T& item);
	void Pop();
private:
	T* queue;
	int front;
	int rear;
	int capacity;
};

template <class T>
Queue<T>::Queue(int queueCapacity) :capacity(queueCapacity) {
	if (capacity < 1) throw "Queue capacity bust be > 0";
	queue = new T[capacity];
	front = rear = 0;
}

template <class T>
inline bool Queue<T>::IsEmpty() { return front == rear; }

template <class T>
inline T& Queue<T>::Front() {
	if (IsEmpty())throw "Queue is empty. No front element";
	return queue[(front + 1) % capacity];
}

template <class T>
inline T& Queue<T>::Rear() {
	if (IsEmpty())throw "Queue is empty. No front element";
	return queue[rear];
}

template <class T>
void Queue<T>::Push(const T&x) {
	//큐의 rear에 x 삽입
	if ((rear + 1) % capacity == front) {
		//큐가 다 찼으면 큐의 크기를 두배로
		T* newQueue = new T[2 * capacity];
		//queue를 newqueue에 복사
		int start = (front + 1) % capacity;
		if (start < 2) {
			//둘러쌀 필요가 없음 - 원형이 될 필요가 없다
			copy(queue + start, queue + start + capacity - 1, newQueue);
		}
		else {//둘러싸서 - 원형 큐로 만듦
			copy(queue + start, queue + start + capacity - 1, newQueue);
			copy(queue, queue + rear + 1, newQueue + capacity - start);   //교재 p.129의 그림3.9를 봐야 이해할 수 있음
		}

		//queue -> newqueue로 전환
		front = 2 * capacity - 1; //배열의 마지막 인덱스, front+1은 queue의 첫 원소, 즉 배열의 맨 앞 원소이기 때문
		rear = capacity - 2;  //rear은 다음 삽입할 원소가 위치할 곳이기 때문에
		capacity *= 2; //공간 2배 늘어났기 때문에
		delete[] queue;
		queue = newQueue;
	}
	else {
		rear = (rear + 1) % capacity;
		queue[rear] = x;
	}
}

template <class T>
void Queue<T>::Pop() {
	if (IsEmpty())throw "Queue is empty. No front element";
	front = (front + 1) % capacity;
	queue[front].~T(); //T를 위한 파괴자. queue[front], 즉 첫 원소를 삭제한다.
}
