#include <iostream>
using namespace std;

class ENode {
	friend void Equivalence();
public:
	Enode(int d=0)//생성자
	{
		data = d; link = 0;
	}
private:
	int data;
	Enode* link;
};

void Equivalence() {
	//동치 쌍을 입력 받아 동치 부류를 출력한다
	ifstream inFile("equiv.in", ios::in);//입력 화일은 equiv.in
	if (!inFile)throw "Cannot open input file";
	int i, j, n;
	inFile >> n;//객체 수 읽음
	//first와 out을 초기화
	ENode** first = new ENode * [n];
	bool* out = new bool[n];
	//초기화를 위해 STL함수 fill 사용
	fill(first, first + n, 0);
	fill(out, out + n, false);

	//1단계 : 동치 쌍 입력
	inFile >> i >> j;
	while(inFile.good()){//화일 끝인지 검사
		first[i] = new ENode(j, first[i]);
		first[j] = new ENode(i, first[j]);
		inFile >> i >> j;
	}

	//2단계 : 동치 부류 출력
	for (i = 0; i < n; i++) {
		if (!out[i]) {//출력이 필요하다면
			cout << endl << "A new class:" << i;
			out[i] = true;
			ENode* x = first[i]; ENode* top = 0;//스택을 초기화
			while (1) {//부류 나머지 탐색
				while (x) {//리스트를 처리
					j = x->data;
					if (!out[j]) {
						cout << "," << j;
						out[j] = true;
						ENode* y = x->link;
						x->link = top;
						top = x;
						x = y;
					}
					else x = x->link;
				}
				if (!top)break;
				x = first[top->data];
				top = top->link;//스택에서 삭제
			}
		}
		for (i = 0; i < n; i++) {
			while (first[i]) {
				ENode* delnode = first[i];
				first[i] = delnode->link;
				delete delnode;
			}
			delete[]first; delete[] out;
		}
	}
}
