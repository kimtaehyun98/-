#include <iostream>
#include <iterator>
#include <algorithm>
#include <numeric>
using namespace std;

/*STL - 표준 템플릿 라이브러리(Standard Template Library)
  STL을 잘 사용하면 훨씬 더 간편한 코드를 짤 수 있다.*/

//STL의 #include <algorithm>의 accumulation(배열의 원소들의 합)과 multiplies(곱)을 사용한 배열의 곱셈을 반환하는 코드
//작성해보다 알게 된 사실인데 accumulate를 사용하려면 #include <numeric>이 필요!!
int Product(int* a, int n) {
    int initVal = 1;
    return accumulate(a, a + n, initVal, multiplies<int>());
}

//STL의 next_permutation을 사용하면 훨씬 쉽게 순열을 생성할 수 있다.
//이 코드 또한 ostream_iterator를 사용하기 위해 #include <iterator>을 해줘야 한다.
//추가적으로 기본 순열 생성 함수는 모든 순열을 출력하지만 이 코드는 입력 받은 배열의 처음 순차보다 사전적으로 작은 순열은 생성하지 않는다
void Permutation(char* a, const int n) {
    do {
        copy(a, a + n + 1 , ostream_iterator<char>(cout, " ")); //copy를 호출해 a의 원소들을 출력 스티림 cout으로 복사, 복사된 원소 뒤에 " "추가
        cout << endl;
    } while (next_permutation(a, a + n + 1));
}

//실행 코드
int main(void) {
    int arr1[5] = { 1,2,3,4,5 };
    cout << "arr의 원소들을 모두 곱한 값은 : " << Product(arr1, 5) << '\n';
    char arr2[100] = { '1','2','3','4' };
    cout << "arr의 원소들에 대한 순열 출력 : " << '\n';
    Permutation(arr2, 3); //n의 값이 이 함수에서는 원소의 개수가 아닌 배열의 마지막 index값이여야 한다.
}
